// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `package.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
pub struct Package {
    // message fields
    pub releases: ::protobuf::RepeatedField<Release>,
    name: ::protobuf::SingularField<::std::string::String>,
    repository: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Package {
    fn default() -> &'a Package {
        <Package as ::protobuf::Message>::default_instance()
    }
}

impl Package {
    pub fn new() -> Package {
        ::std::default::Default::default()
    }

    // repeated .Release releases = 1;


    pub fn get_releases(&self) -> &[Release] {
        &self.releases
    }
    pub fn clear_releases(&mut self) {
        self.releases.clear();
    }

    // Param is passed by value, moved
    pub fn set_releases(&mut self, v: ::protobuf::RepeatedField<Release>) {
        self.releases = v;
    }

    // Mutable pointer to the field.
    pub fn mut_releases(&mut self) -> &mut ::protobuf::RepeatedField<Release> {
        &mut self.releases
    }

    // Take field
    pub fn take_releases(&mut self) -> ::protobuf::RepeatedField<Release> {
        ::std::mem::replace(&mut self.releases, ::protobuf::RepeatedField::new())
    }

    // required string name = 2;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string repository = 3;


    pub fn get_repository(&self) -> &str {
        match self.repository.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_repository(&mut self) {
        self.repository.clear();
    }

    pub fn has_repository(&self) -> bool {
        self.repository.is_some()
    }

    // Param is passed by value, moved
    pub fn set_repository(&mut self, v: ::std::string::String) {
        self.repository = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repository(&mut self) -> &mut ::std::string::String {
        if self.repository.is_none() {
            self.repository.set_default();
        }
        self.repository.as_mut().unwrap()
    }

    // Take field
    pub fn take_repository(&mut self) -> ::std::string::String {
        self.repository.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for Package {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.repository.is_none() {
            return false;
        }
        for v in &self.releases {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.releases)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.repository)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.releases {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.repository.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.releases {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.repository.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Package {
        Package::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Release>>(
                "releases",
                |m: &Package| { &m.releases },
                |m: &mut Package| { &mut m.releases },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Package| { &m.name },
                |m: &mut Package| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repository",
                |m: &Package| { &m.repository },
                |m: &mut Package| { &mut m.repository },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Package>(
                "Package",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Package {
        static instance: ::protobuf::rt::LazyV2<Package> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Package::new)
    }
}

impl ::protobuf::Clear for Package {
    fn clear(&mut self) {
        self.releases.clear();
        self.name.clear();
        self.repository.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Package {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Package {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Release {
    // message fields
    version: ::protobuf::SingularField<::std::string::String>,
    inner_checksum: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub dependencies: ::protobuf::RepeatedField<Dependency>,
    pub retired: ::protobuf::SingularPtrField<RetirementStatus>,
    outer_checksum: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Release {
    fn default() -> &'a Release {
        <Release as ::protobuf::Message>::default_instance()
    }
}

impl Release {
    pub fn new() -> Release {
        ::std::default::Default::default()
    }

    // required string version = 1;


    pub fn get_version(&self) -> &str {
        match self.version.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        self.version.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bytes inner_checksum = 2;


    pub fn get_inner_checksum(&self) -> &[u8] {
        match self.inner_checksum.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_inner_checksum(&mut self) {
        self.inner_checksum.clear();
    }

    pub fn has_inner_checksum(&self) -> bool {
        self.inner_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inner_checksum(&mut self, v: ::std::vec::Vec<u8>) {
        self.inner_checksum = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inner_checksum(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.inner_checksum.is_none() {
            self.inner_checksum.set_default();
        }
        self.inner_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_inner_checksum(&mut self) -> ::std::vec::Vec<u8> {
        self.inner_checksum.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // repeated .Dependency dependencies = 3;


    pub fn get_dependencies(&self) -> &[Dependency] {
        &self.dependencies
    }
    pub fn clear_dependencies(&mut self) {
        self.dependencies.clear();
    }

    // Param is passed by value, moved
    pub fn set_dependencies(&mut self, v: ::protobuf::RepeatedField<Dependency>) {
        self.dependencies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dependencies(&mut self) -> &mut ::protobuf::RepeatedField<Dependency> {
        &mut self.dependencies
    }

    // Take field
    pub fn take_dependencies(&mut self) -> ::protobuf::RepeatedField<Dependency> {
        ::std::mem::replace(&mut self.dependencies, ::protobuf::RepeatedField::new())
    }

    // optional .RetirementStatus retired = 4;


    pub fn get_retired(&self) -> &RetirementStatus {
        self.retired.as_ref().unwrap_or_else(|| <RetirementStatus as ::protobuf::Message>::default_instance())
    }
    pub fn clear_retired(&mut self) {
        self.retired.clear();
    }

    pub fn has_retired(&self) -> bool {
        self.retired.is_some()
    }

    // Param is passed by value, moved
    pub fn set_retired(&mut self, v: RetirementStatus) {
        self.retired = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_retired(&mut self) -> &mut RetirementStatus {
        if self.retired.is_none() {
            self.retired.set_default();
        }
        self.retired.as_mut().unwrap()
    }

    // Take field
    pub fn take_retired(&mut self) -> RetirementStatus {
        self.retired.take().unwrap_or_else(|| RetirementStatus::new())
    }

    // optional bytes outer_checksum = 5;


    pub fn get_outer_checksum(&self) -> &[u8] {
        match self.outer_checksum.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_outer_checksum(&mut self) {
        self.outer_checksum.clear();
    }

    pub fn has_outer_checksum(&self) -> bool {
        self.outer_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_outer_checksum(&mut self, v: ::std::vec::Vec<u8>) {
        self.outer_checksum = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_outer_checksum(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.outer_checksum.is_none() {
            self.outer_checksum.set_default();
        }
        self.outer_checksum.as_mut().unwrap()
    }

    // Take field
    pub fn take_outer_checksum(&mut self) -> ::std::vec::Vec<u8> {
        self.outer_checksum.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Release {
    fn is_initialized(&self) -> bool {
        if self.version.is_none() {
            return false;
        }
        if self.inner_checksum.is_none() {
            return false;
        }
        for v in &self.dependencies {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.retired {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.inner_checksum)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.dependencies)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.retired)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.outer_checksum)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.version.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.inner_checksum.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        for value in &self.dependencies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.retired.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.outer_checksum.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.version.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.inner_checksum.as_ref() {
            os.write_bytes(2, &v)?;
        }
        for v in &self.dependencies {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.retired.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.outer_checksum.as_ref() {
            os.write_bytes(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Release {
        Release::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &Release| { &m.version },
                |m: &mut Release| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "inner_checksum",
                |m: &Release| { &m.inner_checksum },
                |m: &mut Release| { &mut m.inner_checksum },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Dependency>>(
                "dependencies",
                |m: &Release| { &m.dependencies },
                |m: &mut Release| { &mut m.dependencies },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RetirementStatus>>(
                "retired",
                |m: &Release| { &m.retired },
                |m: &mut Release| { &mut m.retired },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "outer_checksum",
                |m: &Release| { &m.outer_checksum },
                |m: &mut Release| { &mut m.outer_checksum },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Release>(
                "Release",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Release {
        static instance: ::protobuf::rt::LazyV2<Release> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Release::new)
    }
}

impl ::protobuf::Clear for Release {
    fn clear(&mut self) {
        self.version.clear();
        self.inner_checksum.clear();
        self.dependencies.clear();
        self.retired.clear();
        self.outer_checksum.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Release {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Release {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RetirementStatus {
    // message fields
    reason: ::std::option::Option<RetirementReason>,
    message: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RetirementStatus {
    fn default() -> &'a RetirementStatus {
        <RetirementStatus as ::protobuf::Message>::default_instance()
    }
}

impl RetirementStatus {
    pub fn new() -> RetirementStatus {
        ::std::default::Default::default()
    }

    // required .RetirementReason reason = 1;


    pub fn get_reason(&self) -> RetirementReason {
        self.reason.unwrap_or(RetirementReason::RETIRED_OTHER)
    }
    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: RetirementReason) {
        self.reason = ::std::option::Option::Some(v);
    }

    // optional string message = 2;


    pub fn get_message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for RetirementStatus {
    fn is_initialized(&self) -> bool {
        if self.reason.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.reason, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.reason {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.reason {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.message.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RetirementStatus {
        RetirementStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RetirementReason>>(
                "reason",
                |m: &RetirementStatus| { &m.reason },
                |m: &mut RetirementStatus| { &mut m.reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &RetirementStatus| { &m.message },
                |m: &mut RetirementStatus| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RetirementStatus>(
                "RetirementStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RetirementStatus {
        static instance: ::protobuf::rt::LazyV2<RetirementStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RetirementStatus::new)
    }
}

impl ::protobuf::Clear for RetirementStatus {
    fn clear(&mut self) {
        self.reason = ::std::option::Option::None;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RetirementStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RetirementStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Dependency {
    // message fields
    package: ::protobuf::SingularField<::std::string::String>,
    requirement: ::protobuf::SingularField<::std::string::String>,
    optional: ::std::option::Option<bool>,
    app: ::protobuf::SingularField<::std::string::String>,
    repository: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Dependency {
    fn default() -> &'a Dependency {
        <Dependency as ::protobuf::Message>::default_instance()
    }
}

impl Dependency {
    pub fn new() -> Dependency {
        ::std::default::Default::default()
    }

    // required string package = 1;


    pub fn get_package(&self) -> &str {
        match self.package.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_package(&mut self) {
        self.package.clear();
    }

    pub fn has_package(&self) -> bool {
        self.package.is_some()
    }

    // Param is passed by value, moved
    pub fn set_package(&mut self, v: ::std::string::String) {
        self.package = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_package(&mut self) -> &mut ::std::string::String {
        if self.package.is_none() {
            self.package.set_default();
        }
        self.package.as_mut().unwrap()
    }

    // Take field
    pub fn take_package(&mut self) -> ::std::string::String {
        self.package.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string requirement = 2;


    pub fn get_requirement(&self) -> &str {
        match self.requirement.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_requirement(&mut self) {
        self.requirement.clear();
    }

    pub fn has_requirement(&self) -> bool {
        self.requirement.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requirement(&mut self, v: ::std::string::String) {
        self.requirement = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requirement(&mut self) -> &mut ::std::string::String {
        if self.requirement.is_none() {
            self.requirement.set_default();
        }
        self.requirement.as_mut().unwrap()
    }

    // Take field
    pub fn take_requirement(&mut self) -> ::std::string::String {
        self.requirement.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool optional = 3;


    pub fn get_optional(&self) -> bool {
        self.optional.unwrap_or(false)
    }
    pub fn clear_optional(&mut self) {
        self.optional = ::std::option::Option::None;
    }

    pub fn has_optional(&self) -> bool {
        self.optional.is_some()
    }

    // Param is passed by value, moved
    pub fn set_optional(&mut self, v: bool) {
        self.optional = ::std::option::Option::Some(v);
    }

    // optional string app = 4;


    pub fn get_app(&self) -> &str {
        match self.app.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_app(&mut self) {
        self.app.clear();
    }

    pub fn has_app(&self) -> bool {
        self.app.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app(&mut self, v: ::std::string::String) {
        self.app = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app(&mut self) -> &mut ::std::string::String {
        if self.app.is_none() {
            self.app.set_default();
        }
        self.app.as_mut().unwrap()
    }

    // Take field
    pub fn take_app(&mut self) -> ::std::string::String {
        self.app.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string repository = 5;


    pub fn get_repository(&self) -> &str {
        match self.repository.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_repository(&mut self) {
        self.repository.clear();
    }

    pub fn has_repository(&self) -> bool {
        self.repository.is_some()
    }

    // Param is passed by value, moved
    pub fn set_repository(&mut self, v: ::std::string::String) {
        self.repository = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repository(&mut self) -> &mut ::std::string::String {
        if self.repository.is_none() {
            self.repository.set_default();
        }
        self.repository.as_mut().unwrap()
    }

    // Take field
    pub fn take_repository(&mut self) -> ::std::string::String {
        self.repository.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for Dependency {
    fn is_initialized(&self) -> bool {
        if self.package.is_none() {
            return false;
        }
        if self.requirement.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.package)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.requirement)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.optional = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.app)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.repository)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.package.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.requirement.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.optional {
            my_size += 2;
        }
        if let Some(ref v) = self.app.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.repository.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.package.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.requirement.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.optional {
            os.write_bool(3, v)?;
        }
        if let Some(ref v) = self.app.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.repository.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Dependency {
        Dependency::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "package",
                |m: &Dependency| { &m.package },
                |m: &mut Dependency| { &mut m.package },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "requirement",
                |m: &Dependency| { &m.requirement },
                |m: &mut Dependency| { &mut m.requirement },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "optional",
                |m: &Dependency| { &m.optional },
                |m: &mut Dependency| { &mut m.optional },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "app",
                |m: &Dependency| { &m.app },
                |m: &mut Dependency| { &mut m.app },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repository",
                |m: &Dependency| { &m.repository },
                |m: &mut Dependency| { &mut m.repository },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Dependency>(
                "Dependency",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Dependency {
        static instance: ::protobuf::rt::LazyV2<Dependency> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Dependency::new)
    }
}

impl ::protobuf::Clear for Dependency {
    fn clear(&mut self) {
        self.package.clear();
        self.requirement.clear();
        self.optional = ::std::option::Option::None;
        self.app.clear();
        self.repository.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Dependency {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Dependency {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RetirementReason {
    RETIRED_OTHER = 0,
    RETIRED_INVALID = 1,
    RETIRED_SECURITY = 2,
    RETIRED_DEPRECATED = 3,
    RETIRED_RENAMED = 4,
}

impl ::protobuf::ProtobufEnum for RetirementReason {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RetirementReason> {
        match value {
            0 => ::std::option::Option::Some(RetirementReason::RETIRED_OTHER),
            1 => ::std::option::Option::Some(RetirementReason::RETIRED_INVALID),
            2 => ::std::option::Option::Some(RetirementReason::RETIRED_SECURITY),
            3 => ::std::option::Option::Some(RetirementReason::RETIRED_DEPRECATED),
            4 => ::std::option::Option::Some(RetirementReason::RETIRED_RENAMED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RetirementReason] = &[
            RetirementReason::RETIRED_OTHER,
            RetirementReason::RETIRED_INVALID,
            RetirementReason::RETIRED_SECURITY,
            RetirementReason::RETIRED_DEPRECATED,
            RetirementReason::RETIRED_RENAMED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RetirementReason>("RetirementReason", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RetirementReason {
}

impl ::std::default::Default for RetirementReason {
    fn default() -> Self {
        RetirementReason::RETIRED_OTHER
    }
}

impl ::protobuf::reflect::ProtobufValue for RetirementReason {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rpackage.proto\x12\0\"O\n\x07Package\x12\x1c\n\x08releases\x18\x01\
    \x20\x03(\x0b2\x08.ReleaseB\0\x12\x0e\n\x04name\x18\x02\x20\x02(\tB\0\
    \x12\x14\n\nrepository\x18\x03\x20\x02(\tB\0:\0\"\x9d\x01\n\x07Release\
    \x12\x11\n\x07version\x18\x01\x20\x02(\tB\0\x12\x18\n\x0einner_checksum\
    \x18\x02\x20\x02(\x0cB\0\x12#\n\x0cdependencies\x18\x03\x20\x03(\x0b2\
    \x0b.DependencyB\0\x12$\n\x07retired\x18\x04\x20\x01(\x0b2\x11.Retiremen\
    tStatusB\0\x12\x18\n\x0eouter_checksum\x18\x05\x20\x01(\x0cB\0:\0\"L\n\
    \x10RetirementStatus\x12#\n\x06reason\x18\x01\x20\x02(\x0e2\x11.Retireme\
    ntReasonB\0\x12\x11\n\x07message\x18\x02\x20\x01(\tB\0:\0\"q\n\nDependen\
    cy\x12\x11\n\x07package\x18\x01\x20\x02(\tB\0\x12\x15\n\x0brequirement\
    \x18\x02\x20\x02(\tB\0\x12\x12\n\x08optional\x18\x03\x20\x01(\x08B\0\x12\
    \r\n\x03app\x18\x04\x20\x01(\tB\0\x12\x14\n\nrepository\x18\x05\x20\x01(\
    \tB\0:\0*\x7f\n\x10RetirementReason\x12\x11\n\rRETIRED_OTHER\x10\0\x12\
    \x13\n\x0fRETIRED_INVALID\x10\x01\x12\x14\n\x10RETIRED_SECURITY\x10\x02\
    \x12\x16\n\x12RETIRED_DEPRECATED\x10\x03\x12\x13\n\x0fRETIRED_RENAMED\
    \x10\x04\x1a\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
